import{_ as e,c as o,o as t,a2 as c}from"./chunks/framework.BjUghlZR.js";const f=JSON.parse('{"title":"不只是 three.js","description":"","frontmatter":{},"headers":[],"relativePath":"zh/start/more.md","filePath":"zh/start/more.md"}'),d={name:"zh/start/more.md"},a=c('<h1 id="不只是-three-js" tabindex="-1">不只是 three.js <a class="header-anchor" href="#不只是-three-js" aria-label="Permalink to &quot;不只是 three.js&quot;">​</a></h1><p>通过前面的相关介绍，<code>vis-three</code>主要提供了一套开发流程与机制，也就是前面提到的：<code>插件化</code>、<code>策略化</code>、<code>配置化</code>与<code>组件化</code>的相关概念与机制。</p><p>抛开<code>three.js</code>，如果我们只是使用<code>插件化</code>、<code>策略化</code>、<code>配置化</code>、<code>组件化</code>的框架概念和机制，从理论上来说，可以适配所有有类似需求的库或者框架。</p><p>那么，对于的<code>Cesium.js</code>,<code>Babylon.js</code>，<code>d3.js</code>等等的相关库，能够结合碰撞出怎样的火花，期待你的尝试。</p>',4),r=[a];function s(_,n,h,i,p,m){return t(),o("div",null,r)}const j=e(d,[["render",s]]);export{f as __pageData,j as default};
