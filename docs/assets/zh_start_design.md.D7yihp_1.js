import{_ as e}from"./chunks/tdcm-principle.DFzmfmHS.js";import{_ as o,c as t,o as r,a2 as a}from"./chunks/framework.BjUghlZR.js";const c="/docs/image/start/framework.png",b=JSON.parse('{"title":"设计与原理","description":"","frontmatter":{},"headers":[],"relativePath":"zh/start/design.md","filePath":"zh/start/design.md"}'),d={name:"zh/start/design.md"},i=a('<h1 id="设计与原理" tabindex="-1">设计与原理 <a class="header-anchor" href="#设计与原理" aria-label="Permalink to &quot;设计与原理&quot;">​</a></h1><h2 id="整体架构" tabindex="-1">整体架构 <a class="header-anchor" href="#整体架构" aria-label="Permalink to &quot;整体架构&quot;">​</a></h2><p><code>vis-three</code>虽然是组装式的<code>web3D</code>框架，但是在可组装的插件策略等部分，在设计实现的过程中有一定的侧重点。</p><p>当前<code>vis-three</code>框架整体上划分为 3 个层次，分别对应于<a href="./native.html">原生化开发</a>、<a href="./config.html">配置化开发</a>、<a href="./widget.html">组件化开发</a>。</p><ul><li><p><strong>原生化开发-&gt; native/browser</strong>:相当于最原始的浏览器环境或者原生的环境，在这层下提供各种各样的 <code>3D</code> 相关的能力与 api。</p></li><li><p><strong>配置化开发-&gt; tdcm</strong>: <code>tdcm</code>全名叫：<code>three-dimensional config model</code>，这层可以类比为<code>DOM</code>层，在这层下将各种原生的<code>3D</code>能力封装为一个个配置模型。</p></li><li><p><strong>组件化开发 -&gt; Component</strong>: 这层相当于当下前端使用的组件化开发框架，渐进式的开发各种应用。</p></li></ul><p><code>vis-three</code>的三个层次，都是完全的可定制，可控制，他们都属于运行时的集成，没有进行打包和编译，不依赖于任何的打包环境和编译环境。</p><p><img src="'+c+'" alt="/image/start/framework.png"></p><h2 id="配置化原理" tabindex="-1">配置化原理 <a class="header-anchor" href="#配置化原理" aria-label="Permalink to &quot;配置化原理&quot;">​</a></h2><p>简单介绍一下配置化原理：</p><ul><li><p><strong>响应式配置</strong>：通过<code>generateConfig</code>生成的配置，在函数内部会生成配置对象对应的观察者对象，然后将通过<code>proxy</code>代理过的对象抛出，这个抛出对象会对所有的对象操作进行拦截。</p></li><li><p><strong>操作拦截与通知</strong>：在对<code>proxy</code>对象进行对象属性操作的时候，内部的观察者会将所有相关操作比如：<code>add</code>, <code>set</code>, <code>delete</code>按照一定格式形成通知并抛出。</p></li><li><p><strong>规则翻译与执行</strong>：抛出的所有通知会经过<code>rule</code>规则函数，通过<code>rule</code>将规则进行处理翻译，比如哪种通知可以忽略，哪种通知是需要执行<code>compiler</code>操作。</p></li><li><p><strong>编译器与模型调用</strong>：编译器<code>compiler</code>是一个带有状态和内存空间的对象，一般只指定宏观的操作与调度，但是具体的操作执行会交给每个<code>config</code>对应的处理器<code>model</code>进行执行。 <img src="'+e+'" alt="/image/start/tdcm-principle.png"></p></li></ul>',10),s=[i];function n(l,p,g,m,h,_){return r(),t("div",null,s)}const x=o(d,[["render",n]]);export{b as __pageData,x as default};
