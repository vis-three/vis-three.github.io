import{_ as i,c as s,o as e,a2 as a}from"./chunks/framework.BjUghlZR.js";const g=JSON.parse('{"title":"@vis-three/plugin-selection-support","description":"","frontmatter":{},"headers":[],"relativePath":"zh/library/plugins/plugin-selection-support.md","filePath":"zh/library/plugins/plugin-selection-support.md"}'),t={name:"zh/library/plugins/plugin-selection-support.md"},l=a(`<h1 id="vis-three-plugin-selection-support" tabindex="-1">@vis-three/plugin-selection-support <a class="header-anchor" href="#vis-three-plugin-selection-support" aria-label="Permalink to &quot;@vis-three/plugin-selection-support&quot;">​</a></h1><p>配置化的选择支持插件。</p><p>此插件是在选择插件的基础上支持配置化的形式设置选中的物体。并且在交互选中的返回值中也会返回选中对象的配置 vid 信息。</p><h2 id="最新版本" tabindex="-1">最新版本 <a class="header-anchor" href="#最新版本" aria-label="Permalink to &quot;最新版本&quot;">​</a></h2><img alt="version" src="https://img.shields.io/npm/v/@vis-three/plugin-selection-support"><h2 id="license" tabindex="-1">license <a class="header-anchor" href="#license" aria-label="Permalink to &quot;license&quot;">​</a></h2><img alt="NPM" src="https://img.shields.io/npm/l/@vis-three/plugin-selection-support?color=blue"><h2 id="插件名称" tabindex="-1">插件名称 <a class="header-anchor" href="#插件名称" aria-label="Permalink to &quot;插件名称&quot;">​</a></h2><p><code>SelectionSupportPlugin</code></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>可以使用枚举：<code>SELECTION_SUPPORT_PLUGIN</code></p></div><h2 id="插件依赖" tabindex="-1">插件依赖 <a class="header-anchor" href="#插件依赖" aria-label="Permalink to &quot;插件依赖&quot;">​</a></h2><ul><li>@vis-three/middleware</li><li>@vis-three/plugin-selection</li></ul><h2 id="插件传参" tabindex="-1">插件传参 <a class="header-anchor" href="#插件传参" aria-label="Permalink to &quot;插件传参&quot;">​</a></h2><p>无</p><h2 id="引擎拓展" tabindex="-1">引擎拓展 <a class="header-anchor" href="#引擎拓展" aria-label="Permalink to &quot;引擎拓展&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">export</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> interface</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;"> SelectionSupportEngine</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> extends</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;"> SelectionEngine</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">, </span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">EngineSupport</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">  /**通过vid标识设置场景的选中对象 */</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">  setSelectionBoxBySymbol</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">:</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> (</span><span style="--shiki-dark:#FFAB70;--shiki-light:#E36209;">symbols</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">:</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> string</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">[]) </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">=&gt;</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;"> SelectionSupportEngine</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">;</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">}</span></span></code></pre></div>`,16),n=[l];function p(h,r,o,c,d,k){return e(),s("div",null,n)}const E=i(t,[["render",p]]);export{g as __pageData,E as default};
