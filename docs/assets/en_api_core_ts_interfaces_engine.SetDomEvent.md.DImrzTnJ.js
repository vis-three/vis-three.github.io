import{_ as e,c as a,o as t,a2 as i}from"./chunks/framework.BjUghlZR.js";const g=JSON.parse('{"title":"Interface: SetDomEvent","description":"","frontmatter":{},"headers":[],"relativePath":"en/api/core/ts/interfaces/engine.SetDomEvent.md","filePath":"en/api/core/ts/interfaces/engine.SetDomEvent.md"}'),s={name:"en/api/core/ts/interfaces/engine.SetDomEvent.md"},n=i(`<h1 id="interface-setdomevent" tabindex="-1">Interface: SetDomEvent <a class="header-anchor" href="#interface-setdomevent" aria-label="Permalink to &quot;Interface: SetDomEvent&quot;">​</a></h1><p><a href="./../modules/engine.html">engine</a>.SetDomEvent</p><p>设置Dom事件的触发对象接口</p><p><strong><code>Example</code></strong></p><p>可以将其作为泛型传入Engine的EventDispatcher方法中</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">engine.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">addEventListener</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">&lt;</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">SetDomEvent</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">&gt;(</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&#39;setDom&#39;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">, (</span><span style="--shiki-dark:#FFAB70;--shiki-light:#E36209;">event</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">) </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">=&gt;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> console.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">log</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(event.dom);</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">})</span></span></code></pre></div><h2 id="hierarchy" tabindex="-1">Hierarchy <a class="header-anchor" href="#hierarchy" aria-label="Permalink to &quot;Hierarchy&quot;">​</a></h2><ul><li><p><a href="./eventDispatcher.BaseEvent.html"><code>BaseEvent</code></a></p><p>↳ <strong><code>SetDomEvent</code></strong></p></li></ul><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h3 id="dom" tabindex="-1">dom <a class="header-anchor" href="#dom" aria-label="Permalink to &quot;dom&quot;">​</a></h3><p>• <strong>dom</strong>: <code>HTMLElement</code></p><p>设置时传入的dom对象</p><h4 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/Shiotsukikaedesari/vis-three/blob/2f5203e6/packages/core/engine/index.ts#L20" target="_blank" rel="noreferrer">engine/index.ts:20</a></p><hr><h3 id="type" tabindex="-1">type <a class="header-anchor" href="#type" aria-label="Permalink to &quot;type&quot;">​</a></h3><p>• <strong>type</strong>: <code>&quot;setDom&quot;</code></p><p>事件类型</p><h4 id="overrides" tabindex="-1">Overrides <a class="header-anchor" href="#overrides" aria-label="Permalink to &quot;Overrides&quot;">​</a></h4><p><a href="./eventDispatcher.BaseEvent.html">BaseEvent</a>.<a href="./eventDispatcher.BaseEvent.html#type">type</a></p><h4 id="defined-in-1" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-1" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/Shiotsukikaedesari/vis-three/blob/2f5203e6/packages/core/engine/index.ts#L18" target="_blank" rel="noreferrer">engine/index.ts:18</a></p>`,22),r=[n];function h(o,p,l,d,c,k){return t(),a("div",null,r)}const m=e(s,[["render",h]]);export{g as __pageData,m as default};
