import{_ as e,c as o,o as t,a2 as r}from"./chunks/framework.BjUghlZR.js";const u=JSON.parse('{"title":"为什么要用 VIS-THREE？","description":"","frontmatter":{},"headers":[],"relativePath":"zh/start/intro.md","filePath":"zh/start/intro.md"}'),a={name:"zh/start/intro.md"},d=r('<h1 id="为什么要用-vis-three" tabindex="-1">为什么要用 VIS-THREE？ <a class="header-anchor" href="#为什么要用-vis-three" aria-label="Permalink to &quot;为什么要用 VIS-THREE？&quot;">​</a></h1><h3 id="有序的代码组织" tabindex="-1">有序的代码组织 <a class="header-anchor" href="#有序的代码组织" aria-label="Permalink to &quot;有序的代码组织&quot;">​</a></h3><p>当我们使用 <code>three.js</code> 进行 <code>web3D</code> 项目开发，不管我们是参考<a href="https://threejs.org/" target="_blank" rel="noreferrer">three.js 官网</a>的例子，还是其他的插件 <code>demo</code>，或者从事相关项目开发，会发现进行项目时候的 <strong>代码组织</strong> 是一个难点。随着项目复杂度的升级，在繁杂的模块功能之间去高效的组织代码进行开发所带来的心智压力也随之增大。</p><p><code>vis-three</code>提供了一套从原生 <code>three.js</code> 开发、配置化开发、到组件化开发的项目代码组织模式，覆盖各种复杂度下的<code>web3D</code>项目场景，能够更有序、高效的进行项目开发。</p><h3 id="可选的开发模式" tabindex="-1">可选的开发模式 <a class="header-anchor" href="#可选的开发模式" aria-label="Permalink to &quot;可选的开发模式&quot;">​</a></h3><p><code>vis-three</code>面对不同的项目业务场景与复杂度，提供了不同的开发模式，这些开发模式的底座都是共通的，可以根据项目的升级进行渐进的迭代。</p><p>在这套体系下，<code>vis-three</code>既能够支持<strong>原生 three.js</strong>相关项目的开发，也能够支持<code>vis-three</code>机制下的<strong>配置化开发</strong>，与更为复杂机动的<strong>组件化开发</strong>。</p><h3 id="原生的渲染性能" tabindex="-1">原生的渲染性能 <a class="header-anchor" href="#原生的渲染性能" aria-label="Permalink to &quot;原生的渲染性能&quot;">​</a></h3><p>数据驱动视图框架的兴起与热门，推动前端开发从项目复杂度与人员数量都上升了一个新台阶，但是对于 3D 实时渲染为主的 <code>web3D</code> 项目，在沿用当下热门的前端框架时，如何处理好 3D 部分与热门前端框架间的关系？如何保证实时 3D 渲染的性能？</p><p>结合<code>vis-three</code>框架进行<code>web3D</code>项目的组织迭代，能够保证<code>3D</code>实时渲染性能等同于<code>three.js</code>原生的渲染性能。</p><h3 id="灵活的集成与迁移" tabindex="-1">灵活的集成与迁移 <a class="header-anchor" href="#灵活的集成与迁移" aria-label="Permalink to &quot;灵活的集成与迁移&quot;">​</a></h3><p><code>vis-three</code>框架构建的引擎，是通过各种插件与策略进行集成的，且<code>vis-three</code>的插件和策略是可拔可插的，那么在引擎的功能变更上，就可以通过对不同的插件与策略的安装与取消进行便利的控制。在引擎功能迁移上，引入同样的插件与策略，迁移就已经完成。</p><p>在这套体系下，能够实现开发功能价值最大化，避免重复的踩坑与造轮子。</p><h3 id="稳健的版本升级" tabindex="-1">稳健的版本升级 <a class="header-anchor" href="#稳健的版本升级" aria-label="Permalink to &quot;稳健的版本升级&quot;">​</a></h3><p><code>vis-three</code>通过插件化、策略化与配置化，将应用项目与<code>three.js</code>做了隔离，这种隔离在<code>three.js</code>更新的时候能够起到一个很好的缓冲作用。</p><p>在原生的<code>three.js</code>项目开发与应用构建途中，一旦确定了<code>three.js</code>的依赖版本，在遇到<code>three.js</code>大版本更新的时候，进行同步的成本非常高，容易导致不兼容与牵一发而动全身，进而导致项目大重构，升级成本和风险都很高。</p><p>但是使用了<code>vis-three</code>，在进行<code>three.js</code>的版本更新时，对于应用项目来讲基本是无感的，因为只用更新升级相关的插件与策略或者配置化模块，相关的版本就已经进行了更新兼容，这能在很大程度上保证了应用项目的稳定迭代。</p><h3 id="顺畅的开发过渡" tabindex="-1">顺畅的开发过渡 <a class="header-anchor" href="#顺畅的开发过渡" aria-label="Permalink to &quot;顺畅的开发过渡&quot;">​</a></h3><p>如果你已经使用过<code>three.js</code>进行 web3D 相关项目的开发，那么在你了解和使用<code>vis-three</code>进行项目构建的时候，可以让你很自然很顺畅的进行开发技术过渡。</p><p>官方提供的插件和策略，和相关的配置化模块，都是采用非侵入式的开发构建模式，也就是说，尽可能的不去影响和改变<code>three.js</code>原生的对象和属性与相关概念，在这种模式下，对于<code>three.js</code>的开发者在各种各样的功能与模块中都能够快速的熟悉与上手。</p><h3 id="宽泛的框架结合" tabindex="-1">宽泛的框架结合 <a class="header-anchor" href="#宽泛的框架结合" aria-label="Permalink to &quot;宽泛的框架结合&quot;">​</a></h3><p><code>vis-three</code>通过场景配置化的特性，其中很重要的一部分，是将需要的 UI 逻辑和 3D 渲染层进行解耦。</p><p>对于 UI 框架来说，3D 实时渲染的部分不再是 3D 库的东西，取而代之的是类似于<code>json</code>的配置单，UI 的所有操作都是在对一个简单的<code>json</code>配置单进行操作。</p><p>也就是说大部分情况下，UI 框架将不再会操作 3D 实时渲染所需要用到的对象和属性，将 3D 部分和 UI 部分进行了解耦，既保证了 UI 开发效率，又保证了 3D 实时渲染的性能，还降低了开发难度，保证整个 web3D 项目的运行与开发效率。</p><p><code>vis-three</code>框架不会强行绑定特定的 UI 框架，比如：<code>vue2</code>、<code>vue3</code>、<code>react</code>等等，从框架的设计原理上来讲，<code>vis-three</code>能够与任意前端框架进行结合使用。</p>',25),c=[d];function h(s,i,n,p,l,_){return t(),o("div",null,c)}const v=e(a,[["render",h]]);export{u as __pageData,v as default};
