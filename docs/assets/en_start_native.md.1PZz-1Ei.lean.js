import{_ as s,c as i,o as a,a2 as n}from"./chunks/framework.BjUghlZR.js";const c=JSON.parse('{"title":"Native Development","description":"","frontmatter":{},"headers":[],"relativePath":"en/start/native.md","filePath":"en/start/native.md"}'),e={name:"en/start/native.md"},t=n(`<h1 id="native-development" tabindex="-1">Native Development <a class="header-anchor" href="#native-development" aria-label="Permalink to &quot;Native Development&quot;">​</a></h1><p>If you already have experience or a development habit with <code>three.js</code> and prefer a development approach that leans towards native <code>three.js</code>, this guide will help you use <code>vis-three</code> for more efficient project development while maintaining native <code>three.js</code> development practices.</p><blockquote><p>View the code</p></blockquote><p>example: <a href="https://vis-three.github.io/examples.html?example=engine/Engine.html" target="_blank" rel="noreferrer">https://vis-three.github.io/examples.html?example=engine/Engine.html</a></p><h2 id="engine-setup" tabindex="-1">Engine Setup <a class="header-anchor" href="#engine-setup" aria-label="Permalink to &quot;Engine Setup&quot;">​</a></h2><p>Setting up the <code>vis-three</code> engine is highly efficient compared to native <code>three.js</code>. First, install the following dependencies:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span>npm i three</span></span>
<span class="line"><span>npm i @types/three</span></span>
<span class="line"><span></span></span>
<span class="line"><span># VIS-THREE Core Engine</span></span>
<span class="line"><span>npm i @vis-three/core</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Plugin for three.js WebGLRenderer</span></span>
<span class="line"><span>npm i @vis-three/plugin-webgl-renderer</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Grid Helper Plugin for visual assistance in early stage scenes</span></span>
<span class="line"><span>npm i @vis-three/plugin-grid-helper</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Camera Adaptive Plugin for automatic adaptation to different render window sizes</span></span>
<span class="line"><span>npm i @vis-three/plugin-camera-adaptive</span></span></code></pre></div><p>After installation, you can proceed directly to engine construction. <code>VIS-THREE</code> offers two engine construction methods: <code>class instantiation</code> and <code>functional</code> construction. Each approach has its own advantages depending on the use case:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">import</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> {Engine, defineEngine} </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">from</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &quot;@vis-three/core&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">;</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">import</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> {WebGLRendererPlugin} </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">from</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &quot;@vis-three/plugin-webgl-renderer&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">;</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">import</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> {GridHelperPlugin} </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">from</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &quot;@vis-three/plugin-grid-helper&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">;</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">import</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> {CameraAdaptivePlugin} </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">from</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &quot;@vis-three/plugin-camera-adaptive&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">// class instantiation</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">const</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> engine</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> new</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;"> Engine</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">()</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">   .</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">install</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">       WebGLRendererPlugin</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">({</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">           antialias: </span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">true</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">           alpha: </span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">true</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">       })</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">   )</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">   .</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">install</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">CameraAdaptivePlugin</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">())</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">   .</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">install</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">GridHelperPlugin</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">// functional</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">const</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> engine</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;"> defineEngine</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">({</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">   plugins: [</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">       WebGLRendererPlugin</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">({</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">           antialias: </span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">true</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">           alpha: </span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">true</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">       }),</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">       CameraAdaptivePlugin</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(),</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">       GridHelperPlugin</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(),</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">   ],</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">});</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Different plugins can have various input parameters. You can refer to the plugin documentation to review the parameters for each plugin.</p></div><h2 id="page-mounting" tabindex="-1">Page Mounting <a class="header-anchor" href="#page-mounting" aria-label="Permalink to &quot;Page Mounting&quot;">​</a></h2><p>Once you have the engine, you&#39;ll need to bind it to a DOM element on the page. Since DOM elements come in various sizes, we want the engine to automatically adapt to these dimensions:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">&lt;</span><span style="--shiki-dark:#85E89D;--shiki-light:#22863A;">div</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;"> id</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">=</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;app&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">&gt;&lt;/</span><span style="--shiki-dark:#85E89D;--shiki-light:#22863A;">div</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">&gt;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">engine.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">setDom</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(document.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">getElementById</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;app&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">)).</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">setSize</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">();</span></span></code></pre></div><p>Since no intermediate APIs are required, we can directly use chainable calls. This applies to both engine construction methods:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">const</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> engine</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;"> defineEngine</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">({</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    plugins: [</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">        WebGLRendererPlugin</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">({</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">            antialias: </span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">true</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">            alpha: </span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">true</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">        }),</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">        CameraAdaptivePlugin</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(),</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">        GridHelperPlugin</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(),</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    ],</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">})</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    .</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">setDom</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(document.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">getElementById</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;app&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">))</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    .</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">setSize</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">();</span></span></code></pre></div><h2 id="adding-objects" tabindex="-1">Adding Objects <a class="header-anchor" href="#adding-objects" aria-label="Permalink to &quot;Adding Objects&quot;">​</a></h2><p>The engine comes with a default scene and a perspective camera. You can directly add objects to it, but don&#39;t forget to import the <code>three.js</code> dependencies:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">// import ...</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">import</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> *</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> as</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> THREE </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">from</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &quot;three&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">// engine code</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">const</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> pointLight</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> new</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> THREE</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">PointLight</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;rgb(255, 255, 255)&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">, </span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">1</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">, </span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">300</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">, </span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">0</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">);</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">pointLight.position.y </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">=</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> 30</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">const</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> box</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> new</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> THREE</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">Mesh</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">    new</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> THREE</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">BoxBufferGeometry</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">10</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">, </span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">10</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">, </span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">10</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">),</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">    new</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> THREE</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">MeshStandardMaterial</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">({color: </span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;rgb(255, 105, 100)&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">})</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">);</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">box.position.x </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">=</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> 10</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">const</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> line</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> new</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> THREE</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">Line</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(box.geometry);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">const</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> points</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> new</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> THREE</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">Points</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(box.geometry);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">points.position.x </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">=</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> -</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">10</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">engine.scene.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">add</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(pointLight, box, line, points);</span></span></code></pre></div><h2 id="rendering-the-scene" tabindex="-1">Rendering the Scene <a class="header-anchor" href="#rendering-the-scene" aria-label="Permalink to &quot;Rendering the Scene&quot;">​</a></h2><p>Once our scene is ready, we can proceed to render it:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">engine.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">render</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">();</span></span></code></pre></div><h2 id="object-animation" tabindex="-1">Object Animation <a class="header-anchor" href="#object-animation" aria-label="Permalink to &quot;Object Animation&quot;">​</a></h2><p>We want the box in the scene to have a rotation animation, but currently, we can only render it frame by frame. Handling animation this way might require manually writing timers for rendering control. Is there a more convenient and reliable method for integrating animations?</p><p>It’s simple—just look for a relevant functionality plugin. For this requirement, you can use:</p><p><code>@vis-three/plugin-render-manager</code></p><p>This plugin manages and controls all rendering functions.</p><p>However, simply importing this plugin won’t connect the <code>WebGLRenderer</code> to the rendering process. We also need a strategy that integrates <code>WebGLRenderer</code> rendering with <code>RenderManager</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span>npm i @vis-three/plugin-render-manager</span></span>
<span class="line"><span></span></span>
<span class="line"><span>npm i @vis-three/strategy-webgl-render</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">// import ...</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">import</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> {RenderManagerPlugin} </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">from</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &quot;@vis-three/plugin-render-manager&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">;</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">import</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> {WebGLRenderStrategy} </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">from</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &quot;@vis-three/strategy-webgl-render&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">const</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> engine</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;"> defineEngine</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">({</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    plugins: [</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">        WebGLRendererPlugin</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">({</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">            antialias: </span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">true</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">            alpha: </span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">true</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">        }),</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">        CameraAdaptivePlugin</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(),</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">        GridHelperPlugin</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(),</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">        RenderManagerPlugin</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(),</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    ],</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    strategy: [</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">WebGLRenderStrategy</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">()],</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">})</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    .</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">setDom</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(document.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">getElementById</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;app&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">))</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    .</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">setSize</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">()</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    .</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">play</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">();</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you have installed the <code>@vis-three/plugin-render-manager</code> plugin, you can simply call the <code>play</code> method, and the plugin will automatically manage all rendering.</p></div><p>At this point, you just need to add your animation.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">engine.renderManager.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">on</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;render&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">, (</span><span style="--shiki-dark:#FFAB70;--shiki-light:#E36209;">event</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">) </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">=&gt;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    box.rotation.y </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">+=</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> event.delta </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">*</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> 3</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">;</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">});</span></span></code></pre></div><h2 id="view-controls" tabindex="-1">View Controls <a class="header-anchor" href="#view-controls" aria-label="Permalink to &quot;View Controls&quot;">​</a></h2><p>We want to be able to explore the scene from all angles using the mouse. How can we achieve this? Easy, just look for a relevant plugin.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span>npm i @vis-three/plugin-orbit-controls</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">// import</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">import</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> {OrbitControlsPlugin} </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">from</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &quot;@vis-three/plugin-orbit-controls&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">const</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> engine</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;"> defineEngine</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">({</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    plugins: [</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">        // plugin</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">        OrbitControlsPlugin</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(),</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    ],</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">    // strategy</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">});</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">// some code</span></span></code></pre></div><h2 id="object-events" tabindex="-1">Object Events <a class="header-anchor" href="#object-events" aria-label="Permalink to &quot;Object Events&quot;">​</a></h2><p>A key feature of web projects is rich user interactions. How can we implement this? The answer is simple.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span>npm i @vis-three/plugin-event-manager</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">// import</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">import</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> {EventManagerPlugin} </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">from</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &quot;@vis-three/plugin-event-manager&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">const</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> engine</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;"> defineEngine</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">({</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    plugins: [</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">        // plugin</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">        EventManagerPlugin</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(),</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    ],</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">    // strategy</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">});</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">// some code</span></span></code></pre></div><p>However, installing this plugin directly will result in an error:</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>EventManagerPlugin must install this plugin before: PointerManagerPlugin.</p></div><p>This means that <code>EventManagerPlugin</code> needs to be installed before <code>PointerManagerPlugin</code>. This example illustrates that plugins can have interdependencies. You can check the dependencies of each plugin through the console or documentation. Make sure to install the plugins in the <strong>correct order</strong> as indicated by the prompts during installation.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span>npm i @vis-three/plugin-pointer-manager</span></span>
<span class="line"><span>npm i @vis-three/plugin-event-manager</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">// import</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">import</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> {PointerManagerPlugin} </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">from</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &quot;@vis-three/plugin-pointer-manager&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">;</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">import</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> {EventManagerPlugin} </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">from</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &quot;@vis-three/plugin-event-manager&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">const</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> engine</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;"> defineEngine</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">({</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    plugins: [</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">        // plugin</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">        PointerManagerPlugin</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(),</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">        EventManagerPlugin</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(),</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    ],</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">    // strategy</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">});</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">// some code</span></span></code></pre></div><p>The <code>EventManagerPlugin</code> plugin provides interaction patterns that are consistent with our DOM interaction habits, so we can use it in the following way:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">box.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">addEventListener</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;click&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">, (</span><span style="--shiki-dark:#FFAB70;--shiki-light:#E36209;">event</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">) </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">=&gt;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">    alert</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;hello vis-three&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">);</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">});</span></span></code></pre></div><h2 id="model-import" tabindex="-1">Model Import <a class="header-anchor" href="#model-import" aria-label="Permalink to &quot;Model Import&quot;">​</a></h2><p>An important feature of web3D is the ability to import external model resources. Here, we can also look for relevant plugins to achieve this.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span>npm i plugin-loader-manager</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">// import</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">import</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> {LoaderManagerPlugin} </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">from</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &quot;@vis-three/plugin-loader-manager&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">const</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> engine</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;"> defineEngine</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">({</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    plugins: [</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">        // plugin</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">        LoaderManagerPlugin</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">({</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">            path: </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">import</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">.</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">meta</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">.env.</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">BASE_URL</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">        }),</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    ],</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">    // strategy</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">});</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">// some code</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">engine.loaderManager.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">addEventListener</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;loaded&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">, (</span><span style="--shiki-dark:#FFAB70;--shiki-light:#E36209;">event</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">) </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">=&gt;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">    const</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> model</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> event.resourceMap.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">get</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;/model/katana/katana.obj&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    model.scale.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">set</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">20</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">, </span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">20</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">, </span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">20</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    engine.scene.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">add</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(model);</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">engine.loaderManager.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">load</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">([</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;/model/katana/katana.obj&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">]);</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>We can preconfigure our loading base path. For example, Vite allows you to configure the path using <strong>import.meta.env.BASE_URL</strong>. For detailed parameters and usage, please refer to the relevant documentation.</p></div><h2 id="pre-configured-engines" tabindex="-1">Pre-configured Engines <a class="header-anchor" href="#pre-configured-engines" aria-label="Permalink to &quot;Pre-configured Engines&quot;">​</a></h2><p>From the examples above, we can appreciate the continuous integration capabilities of <code>VIS-THREE</code>. But for general projects, is there a quicker way to get started?</p><p>In such cases, you can use our pre-configured engines.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span>npm i @vis-three/engine-display</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">import</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> *</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> as</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> THREE </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">from</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &quot;three&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">;</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">import</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> {DisplayEngine} </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">from</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &quot;@vis-three/engine-display&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">const</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> engine</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> new</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;"> DisplayEngine</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">()</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    .</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">setDom</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(document.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">getElementById</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;app&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">))</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    .</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">setSize</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">()</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    .</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">play</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">engine.scene.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">add</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">    new</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> THREE</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">Mesh</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">        new</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> THREE</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">BoxBufferGeometry</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">10</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">, </span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">10</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">, </span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;">10</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">),</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">        new</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> THREE</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">MeshBasicMaterial</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">({color: </span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;rgb(255, 105, 100)&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">})</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    )</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">// do something</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>For information on the plugins and strategies available with pre-configured engines, please refer to the relevant documentation.</p></div><h2 id="business-plugins" tabindex="-1">Business Plugins <a class="header-anchor" href="#business-plugins" aria-label="Permalink to &quot;Business Plugins&quot;">​</a></h2><p>The official plugins and strategies may not cover all business needs. You can write custom plugins or strategies based on your specific business requirements.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">// ./Plugin.js</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">export</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> const</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;"> MyPlugin</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> function</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> () {</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">    return</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">        name: </span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;MyPlugin&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">        install</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">() {</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">        },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">        dispose</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">() {</span></span>
<span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">        },</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    };</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">};</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>For a detailed guide on developing custom plugins and strategies, please refer to the documentation: <a href="./plugin.html">Custom Plugins</a> and <a href="./strategy.html">Custom Strategies</a>.</p></div><p>How to integrate plugins? It&#39;s actually the same as integrating other plugins.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">// import ...</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">import</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> {MyPlugin} </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">from</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &quot;./Plugin.js&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">const</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> engine</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> new</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;"> Engine</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">().</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">install</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">MyPlugin</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">());</span></span></code></pre></div><h2 id="engine-modification" tabindex="-1">Engine Modification <a class="header-anchor" href="#engine-modification" aria-label="Permalink to &quot;Engine Modification&quot;">​</a></h2><p>Sometimes, you might encounter situations where certain features in the official pre-configured engines are not needed or affect the current results. In such cases, you can dynamically modify the engine during use.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-dark:#6A737D;--shiki-light:#6A737D;">// import ...</span></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">import</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;"> {MyPlugin} </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">from</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;"> &quot;./Plugin.js&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;">const</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5;"> engine</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> =</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49;"> new</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;"> DisplayEngine</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">()</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    .</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">uninstall</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;LoaderManagerPlugin&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">)</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    .</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">rollback</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;EffectRenderStrategy&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">)</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    .</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">install</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">MyPlugin</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">())</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    .</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">setDom</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(document.</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">getElementById</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#9ECBFF;--shiki-light:#032F62;">&quot;app&quot;</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">))</span></span>
<span class="line"><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">    .</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1;">play</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E;">();</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>To unregister a feature, you only need to specify the <code>name</code> of the plugin or strategy. If you unregister a plugin directly, its dependent strategies will also be unregistered. However, it is not recommended to do so. When unregistering plugins or strategies, <strong>explicitly follow the dependency order for cascading unregistration</strong> to facilitate troubleshooting.</p></div>`,69),l=[t];function p(h,k,r,E,d,g){return a(),i("div",null,l)}const y=s(e,[["render",p]]);export{c as __pageData,y as default};
