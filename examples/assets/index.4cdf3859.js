var h=Object.defineProperty;var d=(r,t,e)=>t in r?h(r,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):r[t]=e;var n=(r,t,e)=>(d(r,typeof t!="symbol"?t+"":t,e),e);import{t as E,a as m}from"./index.7d48aff8.js";import{aI as u,q as l,bN as p}from"./three.837c9bb0.js";const k="@vis-three/plugin-pointer-lock-controls",s=new u(0,0,0,"YXZ"),i=new l,v={type:"change"},L={type:"lock"},P={type:"unlock"},a=Math.PI/2;class C extends p{constructor(e,o){super();n(this,"domElement");n(this,"camera");n(this,"isLocked",!1);n(this,"minPolarAngle",0);n(this,"maxPolarAngle",Math.PI);n(this,"pointerSpeed",1);n(this,"direction",new l(0,0,-1));n(this,"_mouseMove",this.onMouseMove.bind(this));n(this,"_pointerlockChange",this.onPointerlockChange.bind(this));n(this,"_pointerlockError",this.onPointerlockError.bind(this));o===void 0&&(console.warn('THREE.PointerLockControls: The second parameter "domElement" is now mandatory.'),o=document.body),this.domElement=o,this.camera=e,this.connect()}setDom(e){this.dispose(),this.domElement=e,this.connect()}setCamera(e){this.camera=e}getDirection(e){return e.copy(this.direction).applyQuaternion(this.camera.quaternion)}onMouseMove(e){if(this.isLocked===!1)return;const o=e.movementX||0,c=e.movementY||0;s.setFromQuaternion(this.camera.quaternion),s.y-=o*.002*this.pointerSpeed,s.x-=c*.002*this.pointerSpeed,s.x=Math.max(a-this.maxPolarAngle,Math.min(a-this.minPolarAngle,s.x)),this.camera.quaternion.setFromEuler(s),this.dispatchEvent(v)}onPointerlockChange(){this.domElement.ownerDocument.pointerLockElement===this.domElement?(this.dispatchEvent(L),this.isLocked=!0):(this.dispatchEvent(P),this.isLocked=!1)}onPointerlockError(){console.error("THREE.PointerLockControls: Unable to use Pointer Lock API")}connect(){this.domElement.ownerDocument.addEventListener("mousemove",this._mouseMove),this.domElement.ownerDocument.addEventListener("pointerlockchange",this._pointerlockChange),this.domElement.ownerDocument.addEventListener("pointerlockerror",this._pointerlockError)}dispose(){this.domElement.ownerDocument.removeEventListener("mousemove",this._mouseMove),this.domElement.ownerDocument.removeEventListener("pointerlockchange",this._pointerlockChange),this.domElement.ownerDocument.removeEventListener("pointerlockerror",this._pointerlockError)}getObject(){return this.camera}moveForward(e){const o=this.camera;i.setFromMatrixColumn(o.matrix,0),i.crossVectors(o.up,i),o.position.addScaledVector(i,e)}moveRight(e){i.setFromMatrixColumn(this.camera.matrix,0),this.camera.position.addScaledVector(i,e)}lock(){this.domElement.requestPointerLock()}unlock(){this.domElement.ownerDocument.exitPointerLock()}}const _=E(k),x=function(){let r,t;return{name:_,install(e){const o=new C(e.camera,e.dom);e.pointerLockControls=o,r=c=>{o.setDom(c.dom)},e.addEventListener(m.SETDOM,r),t=c=>{o.setCamera(c.camera)},e.addEventListener(m.SETCAMERA,t)},dispose(e){e.removeEventListener(m.SETDOM,r),e.removeEventListener(m.SETCAMERA,t),e.pointerLockControls.dispose(),delete e.pointerLockControls}}};export{x as P};
