var v=Object.defineProperty;var w=(e,s,t)=>s in e?v(e,s,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[s]=t;var r=(e,s,t)=>(w(e,typeof s!="symbol"?s+"":s,t),t);import{b as E,t as p,a as i}from"./index.7d48aff8.js";import{a as m,b as f}from"./index.9c42f01c.js";import{q as h}from"./three.837c9bb0.js";const b="@vis-three/strategy-keyboard-move-render";class u extends E{constructor(t,a){super();r(this,"object");r(this,"domElement");r(this,"enabled",!0);r(this,"movementSpeed",1);r(this,"quickenSpeed",10);r(this,"space","local");r(this,"forwrad",new h(0,0,-1));r(this,"extendKeyDown",()=>{});r(this,"extendKeyUp",()=>{});r(this,"moveForward",!1);r(this,"moveBackward",!1);r(this,"moveLeft",!1);r(this,"moveRight",!1);r(this,"quicken",!1);r(this,"worldVector",new h);r(this,"_onKeyDown",this.onKeyDown.bind(this));r(this,"_onKeyUp",this.onKeyUp.bind(this));a===void 0&&(console.warn('THREE.KeyboardMoveControls: The second parameter "domElement" is now mandatory.'),a=document.body),this.object=t,this.domElement=a,window.addEventListener("keydown",this._onKeyDown),window.addEventListener("keyup",this._onKeyUp)}setCamera(t){this.object=t}setDom(t){this.domElement=t}onKeyDown(t){switch(t.code){case"ArrowUp":case"KeyW":this.moveForward=!0;break;case"ArrowLeft":case"KeyA":this.moveLeft=!0;break;case"ArrowDown":case"KeyS":this.moveBackward=!0;break;case"ArrowRight":case"KeyD":this.moveRight=!0;break}t.shiftKey&&(this.quicken=!0),this.extendKeyDown(t)}onKeyUp(t){switch(t.code){case"ArrowUp":case"KeyW":this.moveForward=!1;break;case"ArrowLeft":case"KeyA":this.moveLeft=!1;break;case"ArrowDown":case"KeyS":this.moveBackward=!1;break;case"ArrowRight":case"KeyD":this.moveRight=!1;break}t.shiftKey||(this.quicken=!1),this.extendKeyUp(t)}update(t){if(this.enabled===!1)return;this.dispatchEvent({type:"beforeUpdate",delta:t,object:this.object});const a=t*this.movementSpeed+(this.quicken?this.quickenSpeed*t:0),n=this.space,o=this.object,d=this.worldVector,c=typeof this.forwrad=="object"?this.forwrad:this.forwrad(o),l=o.up;this.moveForward&&(n==="local"?o.translateZ(-a):(d.copy(c),o.position.addScaledVector(d,a))),this.moveBackward&&(n==="local"?o.translateZ(a):(d.copy(c).applyAxisAngle(l,Math.PI),o.position.addScaledVector(d,a))),this.moveLeft&&(n==="local"?o.translateX(-a):(d.copy(c).applyAxisAngle(l,Math.PI/2),o.position.addScaledVector(d,a))),this.moveRight&&(n==="local"?o.translateX(a):(d.copy(c).applyAxisAngle(l,-Math.PI/2),o.position.addScaledVector(d,a))),this.dispatchEvent({type:"afterUpdate",delta:t,object:o})}dispose(){window.removeEventListener("keydown",this._onKeyDown),window.removeEventListener("keyup",this._onKeyUp)}}const K="@vis-three/plugin-keyboard-move-controls",y=p(K),A=function(e={}){let s,t,a;return{name:y,install(n){const o=new u(e.target||n.camera,n.dom);e.movementSpeed&&(o.movementSpeed=e.movementSpeed),e.quickenSpeed&&(o.quickenSpeed=e.quickenSpeed),e.space&&(o.space=e.space),e.forwrad&&(o.forwrad=e.forwrad),e.extendKeyDown&&(o.extendKeyDown=e.extendKeyDown),e.extendKeyUp&&(o.extendKeyUp=e.extendKeyUp),e.beforeUpdate&&o.addEventListener("beforeUpdate",e.beforeUpdate),e.afterUpdate&&o.addEventListener("afterUpdate",e.afterUpdate),n.keyboardMoveControls=o,s=d=>{o.setDom(d.dom)},n.addEventListener(i.SETDOM,s),t=d=>{o.setCamera(d.camera)},n.addEventListener(i.SETCAMERA,t),a=d=>{o.update(d.delta)},n.addEventListener(i.RENDER,a)},dispose(n){e.beforeUpdate&&n.keyboardMoveControls.removeEventListener("beforeUpdate",e.beforeUpdate),e.afterUpdate&&n.keyboardMoveControls.removeEventListener("afterUpdate",e.afterUpdate),n.removeEventListener(i.SETDOM,s),n.removeEventListener(i.SETCAMERA,t),n.removeEventListener(i.RENDER,a)}}},k=p(b),S=function(){let e;return{name:k,condition:[y,m],exec(s){e=t=>{s.keyboardMoveControls.update(t.delta)},s.renderManager.addEventListener(f.RENDER,e)},rollback(s){s.renderManager.removeEventListener(f.RENDER,e)}}};export{A as K,S as a};
